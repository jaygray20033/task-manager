const sgMail = require("@sendgrid/mail");

const testSendGridConnection = async () => {
  try {
    if (
      !process.env.SENDGRID_API_KEY ||
      process.env.SENDGRID_API_KEY === "your_sendgrid_api_key_here"
    ) {
      console.log("[Email]  SendGrid API key not configured");
      return false;
    }

    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    console.log("[Email]  SendGrid API key configured");
    console.log(`[Email]  Sender email: ${process.env.SENDER_EMAIL}`);
    return true;
  } catch (error) {
    console.error("[Email]  SendGrid connection error:", error.message);
    return false;
  }
};

const sendWelcomeEmail = async (email, name) => {
  try {
    // Only send email if SendGrid API key is configured
    if (
      !process.env.SENDGRID_API_KEY ||
      process.env.SENDGRID_API_KEY === "your_sendgrid_api_key_here"
    ) {
      console.log("[Email] SendGrid not configured. Skipping welcome email.");
      return;
    }

    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    await sgMail.send({
      to: email,
      from: process.env.SENDER_EMAIL || "noreply@taskmanager.com",
      subject: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Task Manager!",
      text: `Xin ch√†o ${name},\n\nC·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Task Manager. Ch√∫ng t√¥i hy v·ªçng ·ª©ng d·ª•ng s·∫Ω gi√∫p b·∫°n qu·∫£n l√Ω c√¥ng vi·ªác hi·ªáu qu·∫£ h∆°n.\n\nCh√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!\n\nTask Manager Team`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4f46e5;">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Task Manager!</h2>
          <p>Xin ch√†o <strong>${name}</strong>,</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Task Manager. Ch√∫ng t√¥i hy v·ªçng ·ª©ng d·ª•ng s·∫Ω gi√∫p b·∫°n qu·∫£n l√Ω c√¥ng vi·ªác hi·ªáu qu·∫£ h∆°n.</p>
          <p>Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!</p>
          <p style="color: #6b7280; margin-top: 30px;">Task Manager Team</p>
        </div>
      `,
    });

    console.log(`[Email] Welcome email sent to ${email}`);
  } catch (error) {
    console.error("[Email] Failed to send welcome email:", error.message);
    // Don't throw error - we don't want email failure to block user registration
  }
};

const sendCancelationEmail = async (email, name) => {
  try {
    // Only send email if SendGrid API key is configured
    if (
      !process.env.SENDGRID_API_KEY ||
      process.env.SENDGRID_API_KEY === "your_sendgrid_api_key_here"
    ) {
      console.log(
        "[Email] SendGrid not configured. Skipping cancelation email."
      );
      return;
    }

    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    console.log(`[Email] Cancelation email sent to ${email}`);
  } catch (error) {
    console.error("[Email] Failed to send cancelation email:", error.message);
    // Don't throw error - we don't want email failure to block user deletion
  }
};

const sendPasswordResetEmail = async (email, name, resetURL) => {
  try {
    if (
      !process.env.SENDGRID_API_KEY ||
      process.env.SENDGRID_API_KEY === "your_sendgrid_api_key_here"
    ) {
      console.log(
        "[Email] SendGrid not configured. Skipping password reset email."
      );
      console.log(`[Email] Reset URL would be: ${resetURL}`);
      return;
    }

    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    await sgMail.send({
      to: email,
      from: process.env.SENDER_EMAIL || "noreply@taskmanager.com",
      subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u Task Manager",
      text: `Xin ch√†o ${name},\n\nB·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Task Manager c·ªßa m√¨nh.\n\nVui l√≤ng nh·∫•p v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (link c√≥ hi·ªáu l·ª±c trong 1 gi·ªù):\n${resetURL}\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.\n\nTask Manager Team`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4f46e5;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          <p>Xin ch√†o <strong>${name}</strong>,</p>
          <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Task Manager c·ªßa m√¨nh.</p>
          <p>Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (link c√≥ hi·ªáu l·ª±c trong 1 gi·ªù):</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetURL}" style="background-color: #4f46e5; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
          </div>
          <p style="color: #ef4444; font-size: 14px; margin-top: 20px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
          <p style="color: #6b7280; margin-top: 30px;">Task Manager Team</p>
        </div>
      `,
    });

    console.log(`[Email] Password reset email sent to ${email}`);
  } catch (error) {
    console.error(
      "[Email] Failed to send password reset email:",
      error.message
    );
  }
};

const sendTaskReminderEmail = async (
  email,
  name,
  taskDescription,
  dueDate,
  category = "Chung"
) => {
  try {
    console.log(`[Email] Attempting to send task reminder to ${email}`);
    console.log(
      `[Email] Task: "${taskDescription}", Category: ${category}, Due: ${dueDate}`
    );

    if (
      !process.env.SENDGRID_API_KEY ||
      process.env.SENDGRID_API_KEY === "your_sendgrid_api_key_here"
    ) {
      console.log(
        "[Email] SendGrid not configured. Skipping task reminder email."
      );
      return;
    }

    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    const formattedDate =
      typeof dueDate === "string"
        ? dueDate
        : new Date(dueDate).toLocaleString("vi-VN", {
            year: "numeric",
            month: "long",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          });

    if (!email || !email.includes("@")) {
      console.error("[Email] Invalid email address:", email);
      return;
    }

    const msg = {
      to: email,
      from: process.env.SENDER_EMAIL || "noreply@taskmanager.com",
      subject: `‚è∞ Nh·∫Øc nh·ªü: C√¥ng vi·ªác [${category}] s·∫Øp ƒë·∫øn h·∫°n!`,
      text: `Xin ch√†o ${name},\n\nC√¥ng vi·ªác c·ªßa b·∫°n s·∫Øp ƒë·∫øn h·∫°n trong 1 gi·ªù n·ªØa:\n\nH·∫°ng m·ª•c: ${category}\n"${taskDescription}"\n\nTh·ªùi gian h·∫πn: ${formattedDate}\n\nƒê·ª´ng qu√™n ho√†n th√†nh c√¥ng vi·ªác n√†y nh√©!\n\nTask Manager Team`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #f59e0b;">‚è∞ Nh·∫Øc nh·ªü: C√¥ng vi·ªác s·∫Øp ƒë·∫øn h·∫°n!</h2>
          <p>Xin ch√†o <strong>${name}</strong>,</p>
          <p>C√¥ng vi·ªác c·ªßa b·∫°n s·∫Øp ƒë·∫øn h·∫°n trong <strong style="color: #ef4444;">1 gi·ªù n·ªØa</strong>:</p>
          <div style="background-color: #fef3c7; padding: 15px; border-left: 4px solid #f59e0b; margin: 20px 0;">
            <p style="margin: 0 0 10px 0; color: #92400e;"><strong>üìÅ H·∫°ng m·ª•c:</strong> ${category}</p>
            <p style="margin: 0; font-size: 16px;"><strong>"${taskDescription}"</strong></p>
          </div>
          <p><strong>Th·ªùi gian h·∫πn:</strong> ${formattedDate}</p>
          <p style="color: #6b7280;">ƒê·ª´ng qu√™n ho√†n th√†nh c√¥ng vi·ªác n√†y nh√©!</p>
          <p style="color: #6b7280; margin-top: 30px;">Task Manager Team</p>
        </div>
      `,
    };

    console.log(
      "[Email] Sending email with config:",
      JSON.stringify({ to: msg.to, from: msg.from, subject: msg.subject })
    );

    const result = await sgMail.send(msg);
    console.log(`[Email] Task reminder email sent successfully to ${email}`);
    console.log(`[Email] SendGrid response:`, result[0].statusCode);
  } catch (error) {
    console.error(
      "[Email] Failed to send task reminder email:",
      error.message
    );
    // Th√™m logging chi ti·∫øt l·ªói t·ª´ SendGrid
    if (error.response) {
      console.error("[Email] SendGrid error details:", error.response.body);
    }
  }
};

module.exports = {
  sendWelcomeEmail,
  sendCancelationEmail,
  sendPasswordResetEmail,
  sendTaskReminderEmail,
  testSendGridConnection, // Export test function
};
